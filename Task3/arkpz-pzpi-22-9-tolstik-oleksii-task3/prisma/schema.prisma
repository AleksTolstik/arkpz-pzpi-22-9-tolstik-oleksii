generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Container {
  id_container       Int            @id @default(autoincrement())
  operational_status Int?
  network_status     Int?
  id_patient         Int?
  container_number   Int?
  User               User?          @relation(fields: [id_patient], references: [id_user], map: "fk_container_patient")
  Inventory          Inventory[]
  Notification       Notification[]
}

model Inventory {
  id_inventory     Int         @id @default(autoincrement())
  quantity         Int?
  id_medication    Int?
  id_container     Int?
  id_type          Int?
  inventory_number Int
  Container        Container?  @relation(fields: [id_container], references: [id_container], onDelete: Cascade, map: "fk_inventory_container")
  Medication       Medication? @relation(fields: [id_medication], references: [id_medication], onUpdate: NoAction, map: "fk_inventory_medication")
  Type             Type?       @relation(fields: [id_type], references: [id_type], onUpdate: NoAction, map: "fk_inventory_type")
}

model Medication {
  id_medication            Int                        @id @default(autoincrement())
  medication_name          String
  medication_type          String?
  description              String?
  quantity                 Int?
  manufacturer             String?
  expiration_date          DateTime?                  @db.Date
  Inventory                Inventory[]
  MedicationInPrescription MedicationInPrescription[]
}

model MedicationInPrescription {
  id_medication_in_prescription Int                        @id @default(autoincrement())
  dosage_duration               String?
  id_medication                 Int?
  id_prescription               Int?
  Prescription                  Prescription?              @relation(fields: [id_prescription], references: [id_prescription], onDelete: Cascade, map: "fk_medication_in_prescription")
  Medication                    Medication?                @relation(fields: [id_medication], references: [id_medication], onUpdate: NoAction, map: "fk_medication_prescription")
  MedicationIntakeSchedule      MedicationIntakeSchedule[]
}

model MedicationIntakeSchedule {
  id_intake_schedule            Int                       @id @default(autoincrement())
  intake_time                   DateTime?                 @db.Time(6)
  status                        Int?
  id_medication_in_prescription Int?
  MedicationInPrescription      MedicationInPrescription? @relation(fields: [id_medication_in_prescription], references: [id_medication_in_prescription], onDelete: Cascade, map: "fk_intake_schedule")
}

model Notification {
  id_notification Int        @id @default(autoincrement())
  text            String
  send_date       DateTime?  @db.Date
  send_time       DateTime?  @db.Time(6)
  id_container    Int?
  Container       Container? @relation(fields: [id_container], references: [id_container], onDelete: Cascade, map: "fk_notification_container")
}

model Prescription {
  id_prescription                    Int                        @id @default(autoincrement())
  diagnosis_name                     String
  prescription_date                  DateTime?                  @db.Date
  id_patient                         Int?
  id_doctor                          Int?
  MedicationInPrescription           MedicationInPrescription[]
  User_Prescription_id_doctorToUser  User?                      @relation("Prescription_id_doctorToUser", fields: [id_doctor], references: [id_user], onDelete: Cascade, map: "fk_prescription_doctor")
  User_Prescription_id_patientToUser User?                      @relation("Prescription_id_patientToUser", fields: [id_patient], references: [id_user], onDelete: Cascade, map: "fk_prescription_patient")
}

model Type {
  id_type   Int         @id @default(autoincrement())
  type_name String
  unit      String?
  Inventory Inventory[]
}

model User {
  id_user                                    Int            @id @default(autoincrement())
  email                                      String
  password                                   String
  last_name                                  String
  first_name                                 String
  patronymic                                 String?
  birth_date                                 DateTime?      @db.Date
  address                                    String?
  id_role                                    Int?
  Container                                  Container[]
  Prescription_Prescription_id_doctorToUser  Prescription[] @relation("Prescription_id_doctorToUser")
  Prescription_Prescription_id_patientToUser Prescription[] @relation("Prescription_id_patientToUser")
  UserRole                                   UserRole?      @relation(fields: [id_role], references: [id_role], onUpdate: NoAction, map: "fk_user_role")
}

model UserRole {
  id_role   Int    @id @default(autoincrement())
  role_name String
  User      User[]
}
