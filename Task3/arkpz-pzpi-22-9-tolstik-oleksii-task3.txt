Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №3
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							Дашенков Д. С.
Толстік О. В.








2024
РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
1 Мета роботи

Розробити бізнес-логіку та функції адміністрування серверної частини  програмної системи 

2 Хід роботи

1. Розробити бізнес логіку серверної частини програмної системи.
Визначимо основні процеси, які будуть відбуватись при взаємодії ролей: медсестри, лікаря, фармацевта та пацієнта у програмній системі:
1) Аутентифікація та авторизація користувачів.
На початку роботи кожен користувач системи (медсестра, лікар, фармацевт, пацієнт) повинен пройти аутентифікацію та авторизацію. Після цього кожен актор системи набуває власних повноважень:
- лікар може реєструвати пацієнтів, ставити діагноз, призначати ліки пацієнтам, переглядати історію хвороб, а також змінювати та оновлювати інформацію про пацієнтів;
- медсестра має право переглядати історію хвороб, перевіряти призначення ліків та видавати ліки шляхом налаштування IoT контейнерів;
- фармацевт має доступ до списку ліків, інформації про їх наявність на складі, видачу ліків за призначенням лікаря. Має можливість додавати та редагувати інформацію про препарати;
- пацієнт може отримувати сповіщення про прийом, переглядати свою історію хвороб, отримувати список призначених ліків та мати доступ до інформації про їх прийом.


2) Призначення ліків лікарем
Призначення ліків є одним з основних процесів та включає в себе кілька етапів:
- створення рецепту – лікар на основі діагнозу пацієнта та медичних показників створює рецепт, що містить перелік необхідних ліків, дозування та кількість.
- перевірка на наявність ліків – при створенні рецепту система перевіряє наявність ліків на складі.
3) Видача ліків пацієнту
Після того, як рецепт буде затверджено лікарем, медичні працівники мають ознайомитися з призначенням та підготувати розумний контейнер відповідно до нього. Медсестра перевіряє рецепт та заправляє контейнер, зазначаючи дату та кількість виданих доз
4) Контроль за видачею ліків
Після видачі ліків, система має проводити відповідні заходи для забезпечення моніторингу за дотриманням плані лікування:
- логування видачі ліків – всі дані про призначення та видачу ліків зберігаються в історії пацієнта;
- контроль залишків ліків на складі – система повинна автоматично оновлювати наявність ліків на складі після кожної видачі.
5) Сповіщення та нагадування
Пацієнту мають надходити нагадування про необхідність прийому ліків згідно з його рецептом. Відповідно у разі пропущення прийому, нагадування мають приходити медсестрі. Фармацевт отримує сповіщення, якщо рівень запасів ліків наближається до мінімуму. Відповідне сповіщення отримує і лікар у разі недостатньої кількості ліків для призначення.
6) Генерація звітів та статистики
Система може генерувати звіти про статистику лікування та залишок медичних препаратів. Лікар може переглядати дані про пацієнтів: їх історії хвороб, лікування, реакції на ліки. Медичному персоналу при цьому доступний перегляд лише поточного лікування, а пацієнту натомість перегляд попередніх призначень.
7) Збереження та оновлення даних
Історія хвороб — кожен пацієнт має окрему історію хвороб, яка містить всі призначення ліків, результати лікування та інші важливі медичні записи. Система повинна дозволяти лікарям оновлювати дані, наприклад, змінювати дозування ліків або коригувати план лікування. Редагувати вже закінчені лікування необхідності немає.

Основні функції та алгоритми:
1. Реєстрація – користувач створює профіль в системі, вносячи основні дані (ім'я, прізвище, вік, діагноз);
2. Створення рецепта – лікар вводить ліки, дозування, кількість та інші дані в рецепті;
3. Перевірка наявності ліків – система перевіряє, чи є ліки на складі фармацевта;
4. Видача ліків – фармацевт видає ліки згідно з рецептом, оновлюючи кількість ліків на складі
5. Налаштування контейнеру – медсестра заправляє контейнер ліками та запускає його для роботи;
6. Збір даних для звітності – система автоматично генерує звіти про видачу ліків, статистику щодо хворих, використання ліків та їх залишки.

2. Розробити функції адміністрування серверної частини програмної системи.
Роль адміністратора в системі HealthyHelper необхідна для виконання технічних, безпекових та управлінських завдань. Ця роль не перетинається з ролями медсестри, лікаря чи фармацевта, що забезпечує чіткий розподіл обов'язків та підтримує ефективність і безпеку роботи системи.
До функцій адміністрування можна віднести:
- відновлення даних у разі збою (робота з резервними копіями);
- аналіз журналів активності для пошуку проблем (наприклад, невчасне заповнення контейнерів медсестрами);
- виявлення та усунення спроб несанкціонованого доступу;
- створення нових або зміна існуючих ролей доступу (наприклад, перевести фармацевта на іншу роль);
- блокування облікових записів у разі втрати доступу чи інших інцидентів;
- додавання нових розумних контейнерів або зміна конфігурації наявних;
- контроль за виконанням політик безпеки (швидке блокування користувачів у разі компрометації доступу).

3. Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини.
Для початку додамо роль адміністратора та його функціонал (рис 1).

 
Рисунок 1 – Файли функціоналу адміністратора

Додамо файли для формування звітностей для адміністратора (рис. 2).

 
Рисунок 2 – Налаштування формування звітностей

Також додамо файл з реалізацією резервного копіювання системи та інформації з бази даних


 
Рисунок 3 – Файл з функціоналом резервного копіювання

Специфікація API адміністрування:
1. Змінити роль користувача (POST):
admin/changeRole/:userId
2. Отримати всіх користувачів системи (GET):
admin/users/:id_role
3. Додати нову роль (POST):
admin/addRole
4. Видалити користувача (DELETE):
admin/deleteUser
 5. Заблокувати користувача (POST):
admin/blockUser/:userId
 6. Отримання журналу всіх повідомлень (GET):
admin/notifications
7. Отримання статистики контейнерів (GET):
admin/containerStats
8. Отримання статистики лікування пацієнтів  (GET):
admin/treatmentStats/:patientId
9. Резервне копіювання (POST):
admin/backup
10. Звіт про видачу ліків для пацієнта (GET):
admin/reports/medication-distribution/:patientId
11. Звіт про залишки ліків на складі (GET):
admin/reports/medication-stock

Створимо UML діаграму діяльності для серверної частини (рис. 4).
 
Рисунок 4 – UML діаграма діяльності для серверної частини

4. Перевірити роботу серверної частини системи.
1. Змінити роль користувача (POST):
admin/changeRole/:userId

 
Рисунок 5 – Результат зміни ролі користувача

2. Отримати всіх користувачів системи (GET):
admin/users/:id_role
 
Рисунок 6 – Результат зміни ролі користувача

3. Додати нову роль (POST):
admin/addRole
 
Рисунок 7 – Додавання нової користувацької ролі


4. Видалити користувача (DELETE):
admin/deleteUser

 
Рисунок 8 – Додавання нової користувацької ролі

 5. Заблокувати користувача (POST):
admin/blockUser/:userId

 
Рисунок 9 – Додавання нової користувацької ролі

 6. Отримання журналу всіх повідомлень (GET):
admin/notifications

 
Рисунок 10 – Додавання нової користувацької ролі

7. Отримання статистики контейнерів (GET):
admin/containerStats

 
Рисунок 11 – Додавання нової користувацької ролі
8. Отримання статистики лікування пацієнтів  (GET):
admin/treatmentStats/:patientId

 
Рисунок 12 – Додавання нової користувацької ролі

9. Резервне копіювання (POST):
admin/backup

 
Рисунок 13 – Створення резервної копії

 
Рисунок 14 – Результат створення резервної копії



10. Звіт про видачу ліків для пацієнта (GET):
admin/reports/medication-distribution/:patientId

 
Рисунок 15 – Звіт з інформацією про пацієнтів

11. Звіт про залишки ліків на складі  (GET):
admin/reports/medication-stock

 
Рисунок 16 – Звіт із залишку медичних препаратів



Висновок:
У ході лабораторної роботи розроблено функції адміністрування, які дозволяють керувати системою: додавання нових ролей, зміна ролі користувача, видалення користувачів, блокування користувачів, а також отримання статистики, журналу повідомлень та звітів. Реалізовано маршрути для роботи з API, забезпечено обробку запитів із використанням сервісних методів. Таким чином, досягнуто автоматизації ключових адміністративних завдань, що спрощує управління системою та підвищує її ефективність.
