Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							Дашенков Д. С.
Толстік О. В.








2024
     РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)
     1 Мета роботи
     
     Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
     
     2 Хід роботи
     
1. Розробити будову програмної системи.
     Архітектура програмної системи клієнт-серверна. Серверна частина реалізована на Node.js з використанням Express.js як веб-фреймворку. Для зв'язку з базою даних використовуються API. Аутентифікація користувачів відбувається через сесії. Мова програмування JavaScript, СУБД PostgreSQL для зберігання даних.
     Модулі сервера:
     1. Авторизація та аутентифікація (управління сесіями користувачів та раєстрацією користувачів).
     2. Модуль роботи з пацієнтами (створення, читання, оновлення, видалення пацієнтів).
     3. Модуль медикаментів (обробка інформації про препарати).
     4. Модуль контейнерів (управління відсіками для медикаментів).
     5. Модуль основної інформації (повернення даних про пацієнтів, функції пошуку та фільтрації, інформація про призначення тощо).
     6. Модуль профілю (функції керування інформацією користувачів).
     
     
     
     
2. Створити UML діаграму прецедентів для серверної частини системи.
     У системі передбачено чотири основні ролі користувачів: лікар, медсестра, фармацевт і пацієнт.
     Лікар має можливість додавати пацієнтів до списку хворих, редагувати графік прийому ліків для пацієнтів, переглядати графік прийому, отримувати звіти про прийняті препарати та план лікування.
     Медсестра виконує слідкування за дотриманням пацієнтом графіку прийому призначених йому ліків. Вона має доступ до перегляду історії лікування пацієнтів, включаючи інформацію про прийняті та пропущені ліки, для моніторингу ефективності терапії. Також медсестра може підключати та налаштовувати IoT-пристрої, щоб забезпечити автоматичний контроль над лікуванням пацієнтів.
     Фармацевт відповідає за оновлення інформації про наявність ліків у системі. Це дозволяє тримати актуальну базу даних про ліки, що можуть бути призначені пацієнтам.
     Пацієнт отримує нагадування про прийом ліків у вигляді звукових та текстових сигналів. Він може переглядати прийняті та пропущені дози ліків, налаштовувати звукові сигнали додатку, а також отримувати доступ до графіка прийому ліків, який налаштовує лікар.
     Відповідно до існуючих ролей та їх можливостей створимо діаграму прецедентів (рис. 1).

Рисунок 1 – Діаграма прецедентів для програмної
системи HealthyHelper

3. Створити ER діаграму даних.
На рисунку 2 зображена ER-діаграма. Опишемо основні сутності бд: 
     1. UserRole визначає ролі користувачів системи, де кожна роль має унікальний ідентифікатор та назву ролі.
     2. Doctor, MedicalStaff, Pharmacist, Patient – це сутності, які представляють різні типи користувачів системи. Вони мають спільні атрибути, такі як email, пароль, прізвище, ім'я, по батькові, дата народження, адреса, а також посилання на відповідну роль через зовнішній ключ. Лікар додатково має атрибут спеціалізації.
     3. Medication містить інформацію про ліки, включаючи їх унікальний ідентифікатор, назву, тип, опис, кількість, виробника та термін придатності.
     4. Prescription зберігає інформацію про призначення ліків, включаючи діагноз, дату призначення, а також посилання на пацієнта, лікаря та відповідні ліки.
     5. MedicationInPrescription виступає як зв'язуюча таблиця між ліками та призначеннями. Вона містить дозування, тривалість лікування та відповідні зовнішні ключі.
     6. MedicationIntakeSchedule визначає графік прийому ліків, включаючи час прийому, статус (прийнято чи пропущено) та посилання на відповідні ліки в призначенні.
     7. Container описує IoT-пристрої, які допомагають у моніторингу прийому ліків. У таблиці зберігається стан пристрою, статус мережі та прив'язка до пацієнта.
     8. Notification використовується для збереження текстових повідомлень-нагадувань. Вона містить текст, дату та час надсилання, а також посилання на пристрій.
     9. Inventory забезпечує облік ліків у контейнерах, включаючи кількість, посилання на ліки, контейнер та їхній тип.
     10. Type представляє типи ліків, включаючи назву типу та одиницю виміру.
     

     Рисунок 2 – ER-діаграма

4. Розробити базу даних (БД) програмної системи.
     Була розроблена база даних з використанням для цього PostgreSQL. Структура розробленої бази даних наведена на рисунку 3.


Рисунок 3 – Структура бази даних
5. Створити діаграму структури БД.
     Структура бази даних з вказанням назв полів, типів даних та зв'язків наведена на рисунку 4.


Рисунок 4 – Структура бази даних

6. Розробити функції роботи з БД (ORM або CoRM тощо).
     Для розробки функцій роботи з базою даних використовується ORM Prisma. Вона дозволяє описувати моделі бази даних у вигляді схем, на основі яких автоматично генерується клієнт для взаємодії з базою даних. У рамках проєкту створені моделі для кожної сутності, представленої в базі даних, включаючи UserRole, Doctor, MedicalStaff, Pharmacist, Patient, Medication, Prescription, MedicationIntakeSchedule, Container, Notification, Inventory та Type. Ці моделі описують структуру таблиць, їхні поля, типи даних та взаємозв'язки між сутностями.
     Для роботи з даними реалізовані функції, які виконують основні CRUD-операції, такі як створення нових записів, отримання інформації за різними критеріями, оновлення існуючих записів та їхнє видалення. Зокрема, функції створення об'єктів приймають вхідні дані, перевіряють їх коректність та додають нові записи у відповідні таблиці. Функції отримання даних дозволяють виконувати пошук записів за конкретними параметрами, забезпечуючи вибірковість і зручність доступу. Також передбачені функції оновлення даних, які дозволяють змінювати певні поля записів, наприклад статус або кількість, та функції видалення для очищення бази даних від неактуальних даних.
     
     7. Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
     Для взаємодії серверної частини з клієнтськими додатками у проєкті реалізовано API за допомогою архітектурного стилю REST. REST API містить маршрути для роботи з усіма основними сутностями бази даних. Для кожної з цих сутностей розроблені ендпоінти: Всі запити виконуються за допомогою JSON як формату для передачі даних, що дозволяє зручно інтегрувати сервер з клієнтськими додатками та іншими системами.
     
     8. Створити специфікацію розробленого API.
     Реєстрацій користувачів:
     - реєстрація лікаря (POST): /register/doctor;
     - реєстрація мед. персоналу (POST): /register/medicalStaff;
     - реєстрація фармацевта (POST): /register/pharmacist;
     - реєстрація пацієнта (POST): /register/patient.
     
     Вхід:
     - вхід лікаря (POST): /login/doctor;
     - вхід мед. персоналу (POST): /login/medicalStaff;
     - вхід фармацевта (POST): /login/pharmacist;
     - вхід пацієнта (POST): login/patient.
     
     Профіль: 
     - перегляд даних авторизованого користувача (GET): profile/massage;
     - вихід з аккаунту (POST): profile/logout.
     
     Медичні препарати:
     - додавання мед. препарату (POST): medication/add;
     - видалення мед. препарату (DELETE): /medication/delete/:id;
     - оновлення кількості мед. препарату (PUT): 
     /medication/update-quantity/:id.
     
     Головний екран:
     - відображення всіх пацієнтів (GET): /main/patients;
     - пошук пацієнтів за частковим збігом (POST): /main/patients/search;
     - сортування пацієнтів (POST): /main/patients/sort;
     - перегляд призначень для пацієнта (GET): /main/patients/:id/details;
     - додавання призначення пацієнту (POST):
     /main/patients/:id/add-prescription;
     - редагування існуючого призначення (PUT):
     /main/patients/change-prescription/:id;
     - отримання розкладу прийому ліків (GET):
     /main/patients/prescription-schedule/:id.
     
     Контейнер з ліками:
     - створення нового контейнеру (POST): /container/add;
     - отримання інформації про контейнер (GET): /container/:id;
     - закріплення пацієнта за контейнером (POST): /container/:id/addPatient;
     - додавання ліків до відсіку (POST):
     /container/addMedicationToInventory/:id_inventory;
     - отримання списку призначених препаратів (POST):
     /container/prescribedMedications;
     - отримання типу відсіку (POST): /container /inventoryUnit/:id_inventory.
     
     9. Створити програмну реалізацію розробленого API та функцій роботи з БД.
     Розроблено програмну реалізацію. Структура проєкту зображена на рисунку 5.
     

Рисунок 5 – Структура проєкту
     
     
     10. Перевірити роботу створеного програмного коду серверної частини системи.
     Реєстрацій користувачів:
     - реєстрація лікаря (POST): /register/doctor;
     - реєстрація мед. персоналу (POST): /register/medicalStaff;
     - реєстрація фармацевта (POST): /register/pharmacist;
     - реєстрація пацієнта (POST): /register/patient.
     
     Тіло запитів:
      {
          "email": "oleksii.tolstik@nure.ua",
          "password": "Qwerty.123",
          "last_name": "Толстік",
          "first_name": "Олексій",
          "patronymic": "Віталійович",
          "birth_date": "11.11.2004",
          "address": "Харківська обл."
      }
     
     
     Рисунок 6- Результат реєстрації
     
     Вхід:
     - вхід лікаря (POST): /login/doctor;
     - вхід мед. персоналу (POST): /login/medicalStaff;
     - вхід фармацевта (POST): /login/pharmacist;
     - вхід пацієнта (POST): login/patient.
     Тіло запитів:
      {
          "email": "oleksii.tolstik@nure.ua",
          "password": "Qwerty.123",
      }


Рисунок 7-8 – Результат входу
     
     Профіль: 
     - перегляд даних авторизованого користувача (GET): profile/massage;
     

Рисунок 9 – Результат перегляду профілю
     
     - вихід з аккаунту (POST): profile/logout.
     

Рисунок 10 – Результат виходу з аккаунту
     
     Медичні препарати:
     - додавання мед. препарату (POST): medication/add;
     Тіло заптиу:
      {
        "medication_name": "Парацетамол",
        "medication_type": "Таблетки",
        "description": "Знижує температуру та полегшує біль",
        "quantity": "50",
        "manufacturer": "Фармацевтична компанія №1",
        "expiration_date": "2025-12-31"
      }
     

Рисунок 11 – Результат додавання препарату
     
     - видалення мед. препарату (DELETE): /medication/delete/:id;

Рисунок 12 – Результат видалення медичного препарату
     
     - оновлення кількості мед. препарату (PUT): 
     /medication/update-quantity/:id.
     Тіло запиту:
      {
        "quantity": "30"
      }
     
     Рисунок 13 – Результат оновлення кількості препарату
     
     Головний екран:
     - відображення всіх пацієнтів (GET): /main/patients;
     
     Рисунок 14 – Результат відображення пацієнтів
     
     - пошук пацієнтів за частковим збігом (POST): /main/patients/search;
     Тіло запиту:
      {
        "query": "Олексій"
      }
      

Рисунок 15 – Результат пошуку
     - сортування пацієнтів (POST): /main/patients/sort;
     Тіло запиту
      {
        "sortBy": "alphabetical"
      }
     

Рисунок 16 – Результат сортування
     
     - перегляд призначень для пацієнта (GET): /main/patients/:id/details;
     

Рисунок 17 – Результат відображення
     
     - додавання призначення пацієнту (POST):
     /main/patients/:id/add-prescription;
     Тіло запиту:
      {
          "diagnosis_name": "Test",
          "prescription_date": "11.11.2003",
          "medications": [
              {
                  "medication_id": 2,
                  "dosage_duration": "7 days",
                  "intake_times": ["08:00", "20:00"]
              },
              {
                  "medication_id": 2,
                  "dosage_duration": "5 days",
                  "intake_times": ["10:00"]
              }
          ]
      }
     

Рисунок 18 – Результат додавання призначення
     
     - редагування існуючого призначення (PUT):
     /main/patients/change-prescription/:id;
     Тіло запиту:
      {
        "medications": [
          {
            "id_medication_in_prescription": 2,
            "dosage_duration": "7 днів",
            "intake_times": ["12:00", "18:00"]
          },
          {
            "id_medication_in_prescription": 2,
            "dosage_duration": "10 днів",
            "intake_times": ["08:00"]
          }
        ]
      }

Рисунок 19 – Результат редагування
     
     - отримання розкладу прийому ліків (GET):
     /main/patients/prescription-schedule/:id.
     

Рисунок 20 – Результат отримання розкладу
     
     
     Контейнер з ліками:
     - створення нового контейнеру (POST): /container/add;
     

Рисунок 21 – Результат створення
     - отримання інформації про контейнер (GET): /container/:id;
     

Рисунок 22 – Результат отримання інформації
     
     - закріплення пацієнта за контейнером (POST): /container/:id/addPatient;
     Тіло запиту:
      {
          "patient_id": 4
      }
      

Рисунок 23 – Результат закріплення
     
     - додавання ліків до відсіку (POST):
     /container/addMedicationToInventory/:id_inventory;
     Тіло запиту:
      {
          "quantity": 10,
          "id_medication": 2
      }

Рисунок 24 – Результат додавання ліків
     
     - отримання списку призначених препаратів (POST):
     /container/prescribedMedications;
      {
          "id_patient": 1
      }
      

Рисунок 25 – Результат отримання списку ліків
     
     - отримання типу відсіку (POST): /container /inventoryUnit/:id_inventory.
     

Рисунок 26 – Результат отримання типу відсіку

Посилання на GitHub з кодом виконання:
https://github.com/NureTolstikOleksii/arkpz-pzpi-22-9-tolstik-oleksii/tree/main/Task2/arkpz-pzpi-22-9-tolstik-oleksii-task2


     Висновок:
     У ході виконання лабораторної роботи було реалізовано цикл розробки серверної частини програмної системи: створено структуру системи, спроєктовано UML-діаграму прецедентів і ER-діаграму даних, розроблено базу даних із відповідною діаграмою її структури. З використанням ORM створено функції для роботи з базою даних, а також розроблено REST API для взаємодії клієнтів із сервером. Було підготовлено специфікацію API та здійснено програмну реалізацію серверної частини з інтегрованими функціями роботи з БД, що забезпечує ефективну взаємодію та масштабованість системи.
