Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з практичної роботи №2
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Методи рефакторингу коду програмного забезпечення»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							доц. Сокорчук І. П.
Толстік О. В.








2024
1 МЕТОДИ РЕФАТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ

1.1 Мета роботи 

Ознайомитися з основними методами рефакторингу коду на основі реальних прикладів з власних програм власного проєкту. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

1.2 Хід роботи 

1. Ознайомився з основними принципами рефакторингу на основі книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
2. Проаналізував власний код проєкту, який реалізовує систему видачі ліків у лікарні, та виявив основні проблеми, які можна усунути за допомогою рефакторингу.
3. Обрав 3 методи рефакторингу: розділення тимчасової змінної (розбиває змінну, яка використовується для різних значень, на окремі змінні), формування шаблонного методу (виділяє спільну логіку в базовий метод для використання в різних підкласах), заміна кодів помилок на виключення (замість кодів помилок використовується обробка через виключення для покращення читабельності та обробки помилок).
4. Створив презентацію (див. додаток А), в якій розглянуто такі ключові моменти що стосуються методів рефакторингу:
- метод розділення тимчасової змінної (Split Temporary Variable);
- приклади застосування та переваги методу;
- метод формування шаблонного методу (Form Template Method);
- приклади застосування та переваги методу;
- метод заміни кодів помилок на виключення (Replace Error Code with Exception).
-  приклади застосування та переваги методу;
5. Оформлено звіт до практичного заняття.

1.3 Висновок

У процесі виконання практичної роботи було детально ознайомлено з основними методами рефакторингу та їх застосуванням на практиці. Було ідентифіковано проблеми в коді, які знижували його читабельність, масштабованість та підтримуваність, а також застосовано відповідні методи рефакторингу для їх усунення. Це дозволило створити більш зрозумілий, структурований та легкий у підтримці код, що є важливим для забезпечення якості та надійності програмного забезпечення в довгостроковій перспективі.

Посилання на файл з кодом в GitHub репозиторії: 
https://github.com/NureTolstikOleksii/arkpz-pzpi-22-9-tolstik-oleksii/tree/main/Pract2/arkpz-pzpi-22-9-tolstik-oleksii-pract2

Посилання на YouTube відео з презентацією:
https://www.youtube.com/watch?v=ovF0eBGrku4

ДОДАТОК А
Слайди презентації
 
Рисунок А.1 – Титульний слайд презентації
 
Рисунок А.2 – Слайд зі змістом презентації
 
Рисунок А.3 – Слайд з описом мети доповіді
 
Рисунок А.4 – Слайд з описом першого методу рефакторингу "Розділення тимчасової змінної"
 
Рисунок А.5 – Слайд з прикладом використанням розділення тимчасової змінної
 
Рисунок А.6 – Слайд з перевагами методу розділення тимчасової змінної
 
Рисунок А.7 – Слайд з описом другого методу рефакторингу "Формування шаблонного методу"
 
Рисунок А.8 – Слайд з прикладом використанням шаблонного методу
 
Рисунок А.9 – Слайд з перевагами методу шаблонізації методу

Рисунок А.10 – Слайд з описом третього методу рефакторингу "Заміна помилок на виключення"

Рисунок А.11 – Слайд з прикладом застосування заміни помилок на виключення

Рисунок А.12 – Слайд з перевагами методу заміни помилок на виключення
 
Рисунок А.13 – Слайд з програмними засобами для автоматизації процесу рефакторингу

Рисунок А.14 – Слайд з висновком до доповіді
 
Рисунок А.15 – Слайд зі списком використаних джерел

