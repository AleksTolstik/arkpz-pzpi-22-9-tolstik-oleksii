Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



Звіт
з лабораторної роботи №4
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Розробка ІоТ клієнта (бізнес логіки та функцій налаштування)»





Виконав 								Перевірив
ст. гр. ПЗПІ-22-9 							Дашенков Д. С.
Толстік О. В.








2024

РОЗРОБКА ІоТ КЛІЄНТА
(БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)
1 Мета роботи

Розробити програмне забезпечення для IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System).

2 Хід роботи

1. Розробити будову програмного забезпечення ІоТ клієнта.
В якості розумного пристрою у моїй системі виступає розумний контейнер для ліків, який буде мати наступний функціонал.
Розумний контейнер для ліків буде оснащений невеликим екраном, який відображає залишок часу до наступного прийому ліків. Як тільки настає час прийому, контейнер активує звуковий сигнал і автоматично відкриває відповідний відсік для ліків, де пацієнт може зручно забрати необхідну дозу. У пристрої передбачено шість відсіків: три для сухих і три для рідких ліків, що забезпечує універсальність у зберіганні різних видів препаратів. Контейнер також оснащений кнопкою ввімкнення, індикатором живлення, який світиться при активному стані, і функцією автоматичного оновлення часу.
Для додаткової зручності та контролю контейнер обладнаний датчиком руху, який реєструє момент вилучення ліків пацієнтом. У разі пропуску дози пристрій надсилає повідомлення на бекенд, що дозволяє вести облік прийомів ліків або сповіщати медичний персонал.
Будова пристрою: 
1. Основні компоненти системи:
- дисплей (показує залишок часу до наступного прийому ліків);
- динамік (активується, коли настає час прийому ліків);
- кнопка увімкнення (вмикає/вимикає пристрій);
- світлодіодний індикатор (світиться, коли пристрій увімкнено);
- сервоприводи відсіків (відкриває відповідний відсік із ліками при настанні призначеного часу);
- датчик руху (фіксує, коли пацієнт бере ліки);

2. Вибір технології
Для розробки була обрана емуляція в середовищі Wokwi. Це дозволить тестувати програму та спостерігати в реальному часі за роботою пристрою.
В якості мови програмування використовується мова програмування Python, для легкої інтеграції з мережею та обробки даних.

3. Функціональність
Основне налаштування пристрою відбувається через мобільний додаток. Це такі налаштування необхідні для роботи: призначення лікарем плану лікування для пацієнта, додавання необхідних ліків до певних відсіків IoT- пристрою, закріплення пацієнта за певним пристроєм. Вся функціональність, пов’язана з видачою ліків, виконується IoT клієнтом.
Приклади:
- оновлення часу на дисплеї;
- розрахунок час до наступного прийому;
- активація сигналу та відкриття потрібного відсіку;
- відстеження кількості  ліків у кожному відсіку;
- відстеження вилучення ліків;
- надсилання оновлених статусів прийняття на сервер.






2. Створити UML діаграму прецедентів для ІоТ клієнта.

 
Рисунок 1 – UML-діаграма прецедентів для ІоТ клієнта.

На діаграмі представлені основні функції IoT пристрою "Розумний-контейнер" для  двох основних акторів: пацієнта та медичного працівника:
1) Пацієнт:
- отримує звукові та текстові нагадування про прийом ліків;
- має можливість взяти препарат із відповідного відсіку;
- може взаємодіяти з пристроєм для перевірки інформації про час прийому та стан ліків.
2.	Медичний працівник:
- отримує повідомлення про пропуски прийому ліків пацієнтом;
- відповідає за підключення та налаштування контейнера (наприклад, встановлення графіку прийому ліків);
- виконує оновлення інформації про ліки в контейнері та заправку відсіків;
- закріплює контейнер за конкретним пацієнтом для моніторингу його стану.

3. Розробити бізнес логіку (математичну обробку пов’язаних із предметною областю даних) та функції налаштування ІоТ клієнта.
Бізнес-логіка забезпечує обробку даних, контроль за використанням ліків, та ефективну інтеграцію між пацієнтом, медичним працівником та IoT пристроєм. Основні компоненти бізнес-логіки включають:
1) Розрахунок часу прийому ліків:
- модуль обчислює час до наступного прийому ліків на основі графіка, встановленого медичним працівником;
- функція calculate_remaining_time() обчислює час до наступного нагадування;
2) Сигналізація про прийом ліків:
- коли настає час, функція активує звуковий сигнал і відкриває відповідний відсік;
- функція update_display() активує нагадування;
3) Відстеження взяття препарату:
- датчик фіксує вилучення ліків пацієнтом;
- функція send_intakeStatus_update() надсилає дані на бекенд і зберігає статус "ліки прийнято";
4) Надсилання повідомлень:
- у разі пропуску прийому надсилається повідомлення медичному працівнику та пацієнту;
- функція send_notification() відправляє звіти про кількість ліків або статус пропуску;
5) Заправка відсіків і оновлення інформації:
- модуль контролює кількість ліків і оновлює інформацію після заправки відсіків;
- функція check_inventory() зберігає дані про препарати.

Функції налаштування IoT-клієнта:
1. Підключення до мережі:
- налаштування Wi-Fi для інтеграції з бекендом (функція wifi_connect());
2. Калібрування датчиків:
- ініціалізація та тестування датчиків для фіксації взяття ліків (функція sync ());
4. Реєстрація пацієнта:
- закріплення контейнера за конкретним пацієнтом (функція fetch_patient_id());
5. Сигналізація та інтерфейс:
- встановлення гучності звуку (функція buzz_on()).

4. Створити діаграму діяльності для ІоТ клієнта.
Створимо діаграму діяльності для IoT клієнта "Розумний-контейнер", яка описує основні кроки взаємодії пристрою з користувачами та системою (рис. 2). Діаграма демонструє логіку роботи пристрою від моменту ввімкнення, синхронізації часу та підключення до Wi-Fi, до виконання основних функцій, таких як визначення пацієнта, розрахунок найближчого прийому ліків, відкриття відповідного відсіку, відстеження кількості ліків, та надсилання повідомлень на серверну частину у разі пропуску або нестачі препаратів. Також врахуємо обробку помилок, таких як відсутність підключення чи не знайденого пацієнта.




 
Рисунок 2 – Діаграма діяльності для ІоТ клієнта
5. Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Розроблені функції ІоТ клієнта:
- wifi_connect() – підключається до Wi-Fi і встановлює з'єднання;
- buzz_on(frequency, duration, repeats) – увімкнення базера для видачі звукового сигналу;
- move_servo(servo_number, angle) – управління сервоприводами для відкриття або закриття відсіків;
- display_message(message1, message2, x1, y1, x2, y2) – виводить текстове повідомлення на OLED-дисплей;
- sync_time() – синхронізує час пристрою з мережею через NTP;
- update_display() – оновлює екран, відображаючи інформацію про час і наступний прийом ліків;
- calculate_remaining_time(target_time_str, timezone_offset) – розраховує залишок часу до наступного прийому ліків;
- send_status_update(operational_status, network_status, container_id) – відправляє статус пристрою (працює/вимкнено) на бекенд;
- fetch_patient_id(container_id) – отримує ідентифікатор пацієнта, прив'язаного до контейнера;
- fetch_next_medication(patient_id) – отримує інформацію про наступний прийом ліків для пацієнта;
- send_intakeStatus_update(intake_id) – оновлює статус прийняття ліків у базі даних (ліки взято);
- send_notification() – відправляє повідомлення про пропущену дозу на бекенд;
- check_inventory() – перевіряє залишок ліків у відповідних відсіках контейнера;
- update_medquantity() – зменшує кількість ліків у відсіку після їх взяття;
- notify_low_stock(container_id, medication_id) – відправляє сповіщення про малий залишок ліків у відсіках.
Також, в процесі розробки знадобилось додати додаткові API шляхи до серверної частини програмної системи:
- /decrementQuantity/:id_inventory – оновлює кількість ліків у вказаному відсіку після їх взяття;
- /inventoryByMedicationAndContainer/:id_medication/:id_container – отримує інформацію про вміст відсіку контейнера за ліками та контейнером;
- /medicationId – отримує ідентифікатор ліків за їх назвою;
- /nearestIntake/:id_patient – отримує найближчий графік прийому ліків для пацієнта;
- -/updateMedicationIntakeStatus/:id_intake_schedule – оновлює статус прийому ліків за вказаним графіком;
- /:id/getPatientId – отримує ідентифікатор пацієнта, закріпленого за вказаним контейнером;
- /:id/updateStatus – оновлює статус роботи контейнера та його підключення до мережі.

6. Перевірити роботу ІоТ клієнта.
Робота IoT клієнта тестувалася за допомогою емулятора Wokwi, що дозволило моделювати поведінку розумного контейнера для ліків в реальному часі (рис. 3). Було перевірено основні функції пристрою, такі як підключення до Wi-Fi, синхронізація часу, відображення інформації на OLED-дисплеї, керування сервоприводами для відкриття відсіків, а також робота з датчиками, базером та інтеграція з бекендом. Емулятор забезпечив повноцінне тестування логіки без необхідності використання фізичного обладнання.






 
Рисунок 3 – Демонстрація вигляду та роботи IoT пристрою

7. Завантажити або оновити (при потребі) створений програмний код у GitHub репозиторій для лабораторних робіт у гілку репозиторію main.
Посилання на GitHub репозиторій:
https://github.com/NureTolstikOleksii/arkpz-pzpi-22-9-tolstik-oleksii/tree/main/Task4/arkpz-pzpi-22-9-tolstik-oleksii-task4



Висновок
У ході лабораторної роботи було розроблено програмне забезпечення для IoT. Відповідно до поставленої мети, реалізовано основні функції пристрою, зокрема підключення до Wi-Fi, синхронізацію часу, керування сервоприводами для відкриття відсіків, роботу з датчиками та базером, а також інтеграцію з бекендом для оновлення статусів і отримання даних. Функціональність клієнта була протестована за допомогою емулятора Wokwi, що підтвердило його коректну роботу.
